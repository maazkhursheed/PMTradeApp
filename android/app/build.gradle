plugins {
    id 'com.android.application'
    // Make sure that you have the Google services Gradle plugin
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    // Add the Performance Monitoring Gradle plugin
    id 'com.google.firebase.firebase-perf'

    // Newrelic plugin
    id 'newrelic'
    id 'kotlin-android'
}


import com.android.build.OutputFile


/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

project.ext.envConfigFiles = [
        dev : ".env.dev",
        uat : ".env.uat",
        prod: ".env.prod",
        sit : ".env.test",
        bau : ".env.uat"
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

def enableHermes = project.ext.react.get("enableHermes", false)
def jscFlavor = 'org.webkit:android-jsc:+'

android {

    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"
    productFlavors {
        dev {
            applicationIdSuffix '.dev'
        }
        prod {
        }
        sit {
            applicationIdSuffix '.stc'
        }
        bau {
            applicationIdSuffix '.bau'
        }
        uat {
            applicationIdSuffix '.uat'
        }
    }

    defaultConfig {
        applicationId "com.fbu.placemakerstrade"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1602581339
        versionName "23.1.1"
        resValue "string", "build_config_package", "com.fbu.placemakerstrade"
        resValue "string", "host_name", project.env.get("AUTH_0_HOST")
        resValue "string", "host_name_windcave", "windcave"
        resValue "string", "verify_url", project.env.get("ANDROID_VERIFY_URL")
        resValue "string", "android_pendo_scheme", project.env.get("PENDO_ANDROID_SCHEME")
        resValue "string", "evergage_scheme", project.env.get("EVERGAGE_ANDROID_SCHEME")
        missingDimensionStrategy 'react-native-camera', 'general'
        multiDexEnabled true
        manifestPlaceholders = [
                appAuthRedirectScheme: "${applicationId}",
                auth0Domain          : project.env.get("AUTH_0_HOST"),
                auth0Scheme          : "${applicationId}",
                android_pendo_scheme             : project.env.get("PENDO_ANDROID_SCHEME")
        ]
    }

    packagingOptions {
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/x86/libjsc.so'
        pickFirst '**/armeabi-v7a/libjsc.so'

        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/LICENSE.md'
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        prod {
            storeFile file("./fbkey.jks")
            storePassword "Cyber2003"
            keyAlias "placemakers"
            keyPassword "Cyber2003"
        }
        dev {
            storeFile file("./fbkey.jks")
            storePassword "Cyber2003"
            keyAlias "placemakers"
            keyPassword "Cyber2003"
        }
        sit {
            storeFile file("./fbkey.jks")
            storePassword "Cyber2003"
            keyAlias "placemakers"
            keyPassword "Cyber2003"
        }
        bau {
            storeFile file("./fbkey.jks")
            storePassword "Cyber2003"
            keyAlias "placemakers"
            keyPassword "Cyber2003"
        }
        uat {
            storeFile file("./fbkey.jks")
            storePassword "Cyber2003"
            keyAlias "placemakers"
            keyPassword "Cyber2003"
        }
        release {
            storeFile file("./fbkey.jks")
            storePassword "Cyber2003"
            keyAlias "placemakers"
            keyPassword "Cyber2003"
        }
    }

    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            // signingConfig signingConfigs.release
            productFlavors.prod.signingConfig signingConfigs.prod
            productFlavors.dev.signingConfig signingConfigs.dev
            productFlavors.sit.signingConfig signingConfigs.sit
            productFlavors.bau.signingConfig signingConfigs.bau
            productFlavors.uat.signingConfig signingConfigs.uat
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.flipper'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group: 'com.facebook.fbjni'
    }

    implementation 'com.google.android.gms:play-services-tagmanager:17.0.0'
    implementation 'com.newrelic.agent.android:android-agent:6.8.0'
    implementation 'com.salesforce.marketingcloud:marketingcloudsdk:7.3.0'

    // implementation 'com.google.firebase:firebase-core:17.5.0'
    // implementation 'com.google.firebase:firebase-analytics:17.5.0'

    implementation "com.google.android.gms:play-services-base:17.6.0"
    implementation 'com.facebook.fresco:fresco:2.6.0'
    implementation 'com.facebook.fresco:animated-gif:2.6.0'


    // Add dependency
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.android.gms:play-services-location:18.0.0'

    // Firebase
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-perf'
    implementation "com.google.firebase:firebase-crashlytics"
    implementation platform('com.google.firebase:firebase-bom:31.0.2')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation ('com.evergage.android:evergage-android-sdk:1.3.0@aar') { transitive = true }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermesvm/android/"
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)
