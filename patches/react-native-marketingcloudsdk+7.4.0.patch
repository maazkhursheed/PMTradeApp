diff --git a/node_modules/react-native-marketingcloudsdk/android/build.gradle b/node_modules/react-native-marketingcloudsdk/android/build.gradle
index bc8893d..948e26a 100755
--- a/node_modules/react-native-marketingcloudsdk/android/build.gradle
+++ b/node_modules/react-native-marketingcloudsdk/android/build.gradle
@@ -10,6 +10,7 @@ buildscript {
 }
 
 apply plugin: 'com.android.library'
+apply plugin: 'kotlin-android'
 
 def safeExtGet(prop, fallback) {
     rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
diff --git a/node_modules/react-native-marketingcloudsdk/android/src/main/java/com/salesforce/marketingcloud/reactnative/RNMarketingCloudSdkModule.java b/node_modules/react-native-marketingcloudsdk/android/src/main/java/com/salesforce/marketingcloud/reactnative/RNMarketingCloudSdkModule.java
deleted file mode 100644
index 2d733a1..0000000
--- a/node_modules/react-native-marketingcloudsdk/android/src/main/java/com/salesforce/marketingcloud/reactnative/RNMarketingCloudSdkModule.java
+++ /dev/null
@@ -1,262 +0,0 @@
-/*
-  Copyright 2019 Salesforce, Inc
-  <p>
-  Redistribution and use in source and binary forms, with or without modification, are permitted
-  provided that the following conditions are met:
-  <p>
-  1. Redistributions of source code must retain the above copyright notice, this list of
-  conditions and the following disclaimer.
-  <p>
-  2. Redistributions in binary form must reproduce the above copyright notice, this list of
-  conditions and the following disclaimer in the documentation and/or other materials provided
-  with the distribution.
-  <p>
-  3. Neither the name of the copyright holder nor the names of its contributors may be used to
-  endorse or promote products derived from this software without specific prior written permission.
-  <p>
-  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package com.salesforce.marketingcloud.reactnative;
-
-import android.util.Log;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import com.facebook.react.bridge.Arguments;
-import com.facebook.react.bridge.Promise;
-import com.facebook.react.bridge.ReactApplicationContext;
-import com.facebook.react.bridge.ReactContextBaseJavaModule;
-import com.facebook.react.bridge.ReactMethod;
-import com.facebook.react.bridge.WritableArray;
-import com.facebook.react.bridge.WritableMap;
-import com.salesforce.marketingcloud.MCLogListener;
-import com.salesforce.marketingcloud.MarketingCloudSdk;
-import java.util.Map;
-import java.util.Set;
-import javax.annotation.Nonnull;
-
-@SuppressWarnings({"unused", "WeakerAccess"})
-public class RNMarketingCloudSdkModule extends ReactContextBaseJavaModule {
-    public RNMarketingCloudSdkModule(ReactApplicationContext reactContext) {
-        super(reactContext);
-    }
-
-    @Override
-    public String getName() {
-        return "RNMarketingCloudSdk";
-    }
-
-    @ReactMethod
-    public void isPushEnabled(Promise promise) {
-        handleAction(new PromiseAction(promise) {
-            @Override
-            void execute(MarketingCloudSdk sdk, @NonNull Promise promise) {
-                promise.resolve(sdk.getPushMessageManager().isPushEnabled());
-            }
-        });
-    }
-
-    @ReactMethod
-    public void enablePush() {
-        handleAction(new Action() {
-            @Override
-            void execute(MarketingCloudSdk sdk) {
-                sdk.getPushMessageManager().enablePush();
-            }
-        });
-    }
-
-    @ReactMethod
-    public void disablePush() {
-        handleAction(new Action() {
-            @Override
-            void execute(MarketingCloudSdk sdk) {
-                sdk.getPushMessageManager().disablePush();
-            }
-        });
-    }
-
-    @ReactMethod
-    public void getSystemToken(Promise promise) {
-        handleAction(new PromiseAction(promise) {
-            @Override
-            void execute(MarketingCloudSdk sdk, @NonNull Promise promise) {
-                promise.resolve(sdk.getPushMessageManager().getPushToken());
-            }
-        });
-    }
-
-    @ReactMethod
-    public void getAttributes(Promise promise) {
-        handleAction(new PromiseAction(promise) {
-            @Override
-            void execute(MarketingCloudSdk sdk, @NonNull Promise promise) {
-                Map<String, String> attributes = sdk.getRegistrationManager().getAttributes();
-                WritableMap writableMap = Arguments.createMap();
-                if (!attributes.isEmpty()) {
-                    for (Map.Entry<String, String> entry : attributes.entrySet()) {
-                        writableMap.putString(entry.getKey(), entry.getValue());
-                    }
-                }
-                promise.resolve(writableMap);
-            }
-        });
-    }
-
-    @ReactMethod
-    public void setAttribute(final String key, final String value) {
-        handleAction(new Action() {
-            @Override
-            void execute(MarketingCloudSdk sdk) {
-                sdk.getRegistrationManager().edit().setAttribute(key, value).commit();
-            }
-        });
-    }
-
-    @ReactMethod
-    public void clearAttribute(final String key) {
-        handleAction(new Action() {
-            @Override
-            void execute(MarketingCloudSdk sdk) {
-                sdk.getRegistrationManager().edit().clearAttribute(key).commit();
-            }
-        });
-    }
-
-    @ReactMethod
-    public void addTag(final String tag) {
-        handleAction(new Action() {
-            @Override
-            void execute(MarketingCloudSdk sdk) {
-                sdk.getRegistrationManager().edit().addTag(tag).commit();
-            }
-        });
-    }
-
-    @ReactMethod
-    public void removeTag(final String tag) {
-        handleAction(new Action() {
-            @Override
-            void execute(MarketingCloudSdk sdk) {
-                sdk.getRegistrationManager().edit().removeTag(tag).commit();
-            }
-        });
-    }
-
-    @ReactMethod
-    public void getTags(Promise promise) {
-        handleAction(new PromiseAction(promise) {
-            @Override
-            void execute(MarketingCloudSdk sdk, @NonNull Promise promise) {
-                Set<String> tags = sdk.getRegistrationManager().getTags();
-                WritableArray array = Arguments.createArray();
-                if (!tags.isEmpty()) {
-                    for (String tag : tags) {
-                        array.pushString(tag);
-                    }
-                }
-                promise.resolve(array);
-            }
-        });
-    }
-
-    @ReactMethod
-    public void setContactKey(final String contactKey) {
-        handleAction(new Action() {
-            @Override
-            void execute(MarketingCloudSdk sdk) {
-                sdk.getRegistrationManager().edit().setContactKey(contactKey).commit();
-            }
-        });
-    }
-
-    @ReactMethod
-    public void getContactKey(final Promise promise) {
-        handleAction(new PromiseAction(promise) {
-            @Override
-            void execute(MarketingCloudSdk sdk, @NonNull Promise promise) {
-                promise.resolve(sdk.getRegistrationManager().getContactKey());
-            }
-        });
-    }
-
-    @ReactMethod
-    public void enableVerboseLogging() {
-        MarketingCloudSdk.setLogLevel(MCLogListener.VERBOSE);
-        MarketingCloudSdk.setLogListener(new MCLogListener.AndroidLogListener());
-    }
-
-    @ReactMethod
-    public void disableVerboseLogging() {
-        MarketingCloudSdk.setLogListener(null);
-    }
-
-    @ReactMethod
-    public void logSdkState() {
-        handleAction(new Action() {
-            @Override
-            void execute(MarketingCloudSdk sdk) {
-                log("MCSDK STATE", sdk.getSdkState().toString());
-            }
-        });
-    }
-
-    private void handleAction(final Action action) {
-        boolean initializing = MarketingCloudSdk.isInitializing();
-        boolean ready = MarketingCloudSdk.isReady();
-
-        if (ready) {
-            action.execute(MarketingCloudSdk.getInstance());
-        } else if (initializing) {
-            MarketingCloudSdk.requestSdk(new MarketingCloudSdk.WhenReadyListener() {
-                @Override
-                public void ready(@NonNull MarketingCloudSdk marketingCloudSdk) {
-                    action.execute(marketingCloudSdk);
-                }
-            });
-        } else {
-            action.err();
-        }
-    }
-
-    private static int MAX_LOG_LENGTH = 4000;
-
-    private static void log(String tag, String msg) {
-        for (int i = 0, length = msg.length(); i < length; i += MAX_LOG_LENGTH) {
-            Log.println(Log.DEBUG, tag, msg.substring(i, Math.min(length, i + MAX_LOG_LENGTH)));
-        }
-    }
-
-    abstract class Action {
-        abstract void execute(MarketingCloudSdk sdk);
-
-        void err() {}
-    }
-
-    abstract class PromiseAction extends Action {
-        private final Promise promise;
-
-        PromiseAction(@Nonnull Promise promise) {
-            this.promise = promise;
-        }
-
-        @Override
-        final void execute(MarketingCloudSdk sdk) {
-            execute(sdk, promise);
-        }
-
-        @Override
-        void err() {
-            promise.reject("MCSDK-INIT",
-                "The MarketingCloudSdk#init method must be called in the Application's onCreate.");
-        }
-
-        abstract void execute(MarketingCloudSdk sdk, @NonNull Promise promise);
-    }
-}
\ No newline at end of file
diff --git a/node_modules/react-native-marketingcloudsdk/android/src/main/java/com/salesforce/marketingcloud/reactnative/RNMarketingCloudSdkModule.kt b/node_modules/react-native-marketingcloudsdk/android/src/main/java/com/salesforce/marketingcloud/reactnative/RNMarketingCloudSdkModule.kt
new file mode 100644
index 0000000..a29c327
--- /dev/null
+++ b/node_modules/react-native-marketingcloudsdk/android/src/main/java/com/salesforce/marketingcloud/reactnative/RNMarketingCloudSdkModule.kt
@@ -0,0 +1,390 @@
+/*
+  Copyright 2019 Salesforce, Inc
+  <p>
+  Redistribution and use in source and binary forms, with or without modification, are permitted
+  provided that the following conditions are met:
+  <p>
+  1. Redistributions of source code must retain the above copyright notice, this list of
+  conditions and the following disclaimer.
+  <p>
+  2. Redistributions in binary form must reproduce the above copyright notice, this list of
+  conditions and the following disclaimer in the documentation and/or other materials provided
+  with the distribution.
+  <p>
+  3. Neither the name of the copyright holder nor the names of its contributors may be used to
+  endorse or promote products derived from this software without specific prior written permission.
+  <p>
+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+@file:JvmName("RNMarketingCloudSdkModule")
+
+package com.salesforce.marketingcloud.reactnative
+
+import android.annotation.SuppressLint
+import android.util.Log
+import com.facebook.react.bridge.*
+import com.salesforce.marketingcloud.MCLogListener
+import com.salesforce.marketingcloud.MarketingCloudSdk
+import com.salesforce.marketingcloud.messages.inbox.InboxMessage
+import com.salesforce.marketingcloud.sfmcsdk.SFMCSdk
+import com.salesforce.marketingcloud.sfmcsdk.SFMCSdk.Companion.requestSdk
+import javax.annotation.Nonnull
+
+class RNMarketingCloudSdkModule(reactContext: ReactApplicationContext?) : ReactContextBaseJavaModule(reactContext) {
+  override fun getName(): String {
+    return "RNMarketingCloudSdk"
+  }
+
+  @ReactMethod
+  fun isPushEnabled(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          promise.resolve(pushModuleInterface.pushMessageManager.isPushEnabled)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun enablePush() {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.pushMessageManager.enablePush()
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun disablePush() {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.pushMessageManager.disablePush()
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun getSystemToken(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          promise.resolve(pushModuleInterface.pushMessageManager.pushToken)
+        }
+
+      }
+    })
+  }
+
+  @ReactMethod
+  fun getAttributes(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          val attributes = pushModuleInterface.registrationManager.attributes
+          val writableMap = Arguments.createMap()
+          if (!attributes.isEmpty()) {
+            for ((key, value) in attributes) {
+              writableMap.putString(key, value)
+            }
+          }
+          promise.resolve(writableMap)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun setAttribute(key: String?, value: String?) {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.registrationManager.edit().setAttribute(key!!, value!!).commit()
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun clearAttribute(key: String?) {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.registrationManager.edit().clearAttribute(key!!).commit()
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun addTag(tag: String?) {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.registrationManager.edit().addTag(tag!!).commit()
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun removeTag(tag: String?) {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.registrationManager.edit().removeTag(tag!!).commit()
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun getTags(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          val tags = pushModuleInterface.registrationManager.tags
+          val array = Arguments.createArray()
+          if (!tags.isEmpty()) {
+            for (tag in tags) {
+              array.pushString(tag)
+            }
+          }
+          promise.resolve(array)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun setContactKey(contactKey: String?) {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.registrationManager.edit().setContactKey(contactKey!!).commit()
+        }
+
+      }
+    })
+  }
+
+  @ReactMethod
+  fun getContactKey(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          promise.resolve(pushModuleInterface.registrationManager.contactKey)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun enableVerboseLogging() {
+    MarketingCloudSdk.setLogLevel(MCLogListener.VERBOSE)
+    MarketingCloudSdk.setLogListener(MCLogListener.AndroidLogListener())
+  }
+
+  @ReactMethod
+  fun disableVerboseLogging() {
+    MarketingCloudSdk.setLogListener(null)
+  }
+
+  @ReactMethod
+  fun logSdkState() {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        log("MCSDK STATE", sdk.getSdkState().toString())
+      }
+    })
+  }
+
+  private fun handleAction(action: Action) {
+    requestSdk { sfmcSdk -> action.execute(sfmcSdk) }
+  }
+
+  internal abstract inner class Action {
+    abstract fun execute(sdk: SFMCSdk)
+    open fun err() {}
+  }
+
+  internal abstract inner class PromiseAction(@param:Nonnull private val promise: Promise) : Action() {
+    override fun execute(sdk: SFMCSdk) {
+      execute(sdk, promise)
+    }
+
+    override fun err() {
+      promise.reject("MCSDK-INIT",
+        "The MarketingCloudSdk#init method must be called in the Application's onCreate.")
+    }
+
+    abstract fun execute(sdk: SFMCSdk, promise: Promise)
+  }
+
+  @ReactMethod
+  fun startWatchingLocation() {
+    handleAction(object : Action() {
+      @SuppressLint("MissingPermission")
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.regionMessageManager.enableGeofenceMessaging()
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun stopWatchingLocation() {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.regionMessageManager.disableGeofenceMessaging()
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun isWatchingLocation(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          promise.resolve(pushModuleInterface.regionMessageManager.isGeofenceMessagingEnabled)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun sendInboxOpenAnalytics(messageId: String) {
+    handleAction(object : Action() {
+      override fun execute(sdk: SFMCSdk) {
+        sdk.mp { pushModuleInterface ->
+          var msg: InboxMessage
+          val list = pushModuleInterface.inboxMessageManager.messages
+          for (objInbox in list) {
+            if (objInbox.id == messageId) {
+              pushModuleInterface.analyticsManager.trackInboxOpenEvent(objInbox)
+              break
+            }
+          }
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun getInboxMessages(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          val arrInboxMessages: WritableArray = WritableNativeArray()
+          val list = pushModuleInterface.inboxMessageManager.messages
+          for (objInbox in list) {
+            val objMessage: WritableMap = WritableNativeMap()
+            objMessage.putString("id", objInbox.id)
+            objMessage.putString("alert", objInbox.alert)
+            objMessage.putBoolean("deleted", objInbox.deleted)
+            objMessage.putString("endDateUtc", if (objInbox.endDateUtc != null) objInbox.endDateUtc.toString() else "")
+            objMessage.putBoolean("read", objInbox.read)
+            objMessage.putString("sendDateUtc", if (objInbox.sendDateUtc != null) objInbox.sendDateUtc.toString() else "")
+            objMessage.putString("sound", objInbox.sound)
+            objMessage.putString("startDateUtc", if (objInbox.startDateUtc != null) objInbox.startDateUtc.toString() else "")
+            objMessage.putString("subject", objInbox.subject)
+            objMessage.putString("title", objInbox.title)
+            objMessage.putString("url", objInbox.url)
+            val attributes = objInbox.customKeys
+            val writableMap = Arguments.createMap()
+            if (attributes != null && !attributes.isEmpty()) {
+              for ((key, value) in attributes) {
+                writableMap.putString(key, value)
+              }
+              objMessage.putMap("keys", writableMap)
+            }
+            arrInboxMessages.pushMap(objMessage)
+          }
+          promise.resolve(arrInboxMessages)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun markAllMessagesRead(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.inboxMessageManager.markAllMessagesRead()
+          promise.resolve(true)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun getMessageCount(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          promise.resolve(pushModuleInterface.inboxMessageManager.messageCount)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun getReadMessageCount(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          promise.resolve(pushModuleInterface.inboxMessageManager.readMessageCount)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun getUnreadMessageCount(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          promise.resolve(pushModuleInterface.inboxMessageManager.unreadMessageCount)
+        }
+      }
+    })
+  }
+
+  @ReactMethod
+  fun refreshMessages(promise: Promise) {
+    handleAction(object : PromiseAction(promise) {
+      override fun execute(sdk: SFMCSdk, promise: Promise) {
+        sdk.mp { pushModuleInterface ->
+          pushModuleInterface.inboxMessageManager.refreshInbox { b -> promise.resolve(b) }
+        }
+      }
+    })
+  }
+
+  companion object {
+    private const val MAX_LOG_LENGTH = 4000
+    private fun log(tag: String, msg: String) {
+      var i = 0
+      val length = msg.length
+      while (i < length) {
+        Log.println(Log.DEBUG, tag, msg.substring(i, Math.min(length, i + MAX_LOG_LENGTH)))
+        i += MAX_LOG_LENGTH
+      }
+    }
+  }
+}
diff --git a/node_modules/react-native-marketingcloudsdk/ios/RNMarketingCloudSdk.m b/node_modules/react-native-marketingcloudsdk/ios/RNMarketingCloudSdk.m
index aeb370e..e0b1aea 100644
--- a/node_modules/react-native-marketingcloudsdk/ios/RNMarketingCloudSdk.m
+++ b/node_modules/react-native-marketingcloudsdk/ios/RNMarketingCloudSdk.m
@@ -128,4 +128,109 @@ - (void)splitLog:(NSString *)msg {
     [self splitLog:[[MarketingCloudSDK sharedInstance] sfmc_getSDKState]];
 }
 
+RCT_EXPORT_METHOD(startWatchingLocation) {
+  [[MarketingCloudSDK sharedInstance] sfmc_startWatchingLocation];
+}
+
+RCT_EXPORT_METHOD(stopWatchingLocation) {
+  [[MarketingCloudSDK sharedInstance] sfmc_stopWatchingLocation];
+}
+
+RCT_EXPORT_METHOD(isWatchingLocation:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
+    resolve(@([[MarketingCloudSDK sharedInstance] sfmc_watchingLocation]));
+}
+
+RCT_EXPORT_METHOD(sendInboxOpenAnalytics : (NSString *_Nonnull)messageId) {
+    // [[MarketingCloudSDK sharedInstance] sfmc_removeTag:tag];
+    NSArray *arrMessages = [[MarketingCloudSDK sharedInstance] sfmc_getAllMessages];
+    for (NSDictionary *objDic in arrMessages) {
+        if([[objDic valueForKey:@"id"] isEqualToString:messageId]) {
+            [[MarketingCloudSDK sharedInstance] sfmc_trackMessageOpened:objDic];
+        }
+    }
+}
+
+RCT_EXPORT_METHOD(getInboxMessages
+                  : (RCTPromiseResolveBlock)resolve rejecter
+                  : (RCTPromiseRejectBlock)reject) {
+
+    NSArray *arrMessages = [[MarketingCloudSDK sharedInstance] sfmc_getAllMessages];
+    NSMutableArray *arrTransformedMessages = [NSMutableArray new];
+
+    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
+    dateFormatter.dateFormat = @"yyyy-MM-dd'T'HH:mm:ssZ";
+    for (NSDictionary *objDic in arrMessages) {
+        NSMutableDictionary *dic = [NSMutableDictionary new];
+        [dic setDictionary:objDic];
+        if([[dic objectForKey:@"sendDateUtc"] isKindOfClass:[NSDate class]]) {
+            NSString *result = [dateFormatter stringFromDate:[dic objectForKey:@"sendDateUtc"]];
+            [dic setObject:result forKey:@"sendDateUtc"];
+        }
+        if([[dic objectForKey:@"endDateUtc"] isKindOfClass:[NSDate class]]) {
+            NSString *result = [dateFormatter stringFromDate:[dic objectForKey:@"endDateUtc"]];
+            [dic setObject:result forKey:@"endDateUtc"];
+        }
+        if([[dic objectForKey:@"startDateUtc"] isKindOfClass:[NSDate class]]) {
+            NSString *result = [dateFormatter stringFromDate:[dic objectForKey:@"startDateUtc"]];
+            [dic setObject:result forKey:@"startDateUtc"];
+        }
+
+        NSArray *keys = [dic objectForKey:@"keys"];
+        [dic removeObjectForKey:@"keys"];
+        NSMutableDictionary *dicForKeys = [NSMutableDictionary new];
+        for (NSDictionary *keyValue in keys) {
+            [dicForKeys setObject:[keyValue objectForKey:@"value"] forKey:[keyValue objectForKey:@"key"]];
+        }
+        if(dicForKeys.count) {
+            [dic setObject:dicForKeys forKey:@"keys"];
+        }
+        [arrTransformedMessages addObject:dic];
+    }
+       if(arrTransformedMessages.count > 0) {
+       resolve(arrTransformedMessages);
+       }
+       else {
+       resolve(@[]);
+       }
+}
+
+RCT_EXPORT_METHOD(refreshMessages
+                  : (RCTPromiseResolveBlock)resolve rejecter
+                  : (RCTPromiseRejectBlock)reject) {
+    resolve(@([[MarketingCloudSDK sharedInstance] sfmc_refreshMessages]));
+}
+
+
+RCT_EXPORT_METHOD(markAllMessagesRead
+                  : (RCTPromiseResolveBlock)resolve rejecter
+                  : (RCTPromiseRejectBlock)reject) {
+
+    BOOL status =[[MarketingCloudSDK sharedInstance] sfmc_markAllMessagesRead];
+    resolve(@(status));
+}
+
+RCT_EXPORT_METHOD(getMessageCount
+                  : (RCTPromiseResolveBlock)resolve rejecter
+                  : (RCTPromiseRejectBlock)reject) {
+
+    NSInteger totalCount = [[MarketingCloudSDK sharedInstance] sfmc_getAllMessagesCount];
+    resolve(@(totalCount));
+}
+
+RCT_EXPORT_METHOD(getReadMessageCount
+                  : (RCTPromiseResolveBlock)resolve rejecter
+                  : (RCTPromiseRejectBlock)reject) {
+
+    NSInteger totalCount = [[MarketingCloudSDK sharedInstance] sfmc_getReadMessagesCount];
+    resolve(@(totalCount));
+}
+
+RCT_EXPORT_METHOD(getUnreadMessageCount
+                  : (RCTPromiseResolveBlock)resolve rejecter
+                  : (RCTPromiseRejectBlock)reject) {
+
+    NSInteger totalCount = [[MarketingCloudSDK sharedInstance] sfmc_getUnreadMessagesCount];
+    resolve(@(totalCount));
+}
+
 @end
diff --git a/node_modules/react-native-marketingcloudsdk/lib/index.js b/node_modules/react-native-marketingcloudsdk/lib/index.js
index 7768384..ee5c5e4 100644
--- a/node_modules/react-native-marketingcloudsdk/lib/index.js
+++ b/node_modules/react-native-marketingcloudsdk/lib/index.js
@@ -160,6 +160,51 @@ class MCReactModule {
     static logSdkState() {
         RNMarketingCloudSdk.logSdkState();
     }
+
+    /**
+     * For Starting the location update for geofencing.
+     *
+     */
+
+    static startWatchingLocation() {
+      RNMarketingCloudSdk.startWatchingLocation();
+    }
+
+    static stopWatchingLocation() {
+      RNMarketingCloudSdk.stopWatchingLocation();
+    }
+
+    static isWatchingLocation() {
+      return RNMarketingCloudSdk.isWatchingLocation();
+    }
+
+    static sendInboxOpenAnalytics(messageId) {
+        return RNMarketingCloudSdk.sendInboxOpenAnalytics(messageId);
+    }
+
+    static getInboxMessages() {
+      return RNMarketingCloudSdk.getInboxMessages();
+    }
+
+    static refreshMessages() {
+      return RNMarketingCloudSdk.refreshMessages();
+    }
+
+    static markAllMessagesRead() {
+      return RNMarketingCloudSdk.markAllMessagesRead();
+    }
+
+    static getMessageCount() {
+      return RNMarketingCloudSdk.getMessageCount();
+    }
+
+    static getReadMessageCount() {
+      return RNMarketingCloudSdk.getReadMessageCount();
+    }
+
+    static getUnreadMessageCount() {
+      return RNMarketingCloudSdk.getUnreadMessageCount();
+    }
 }
 
 export default MCReactModule;
